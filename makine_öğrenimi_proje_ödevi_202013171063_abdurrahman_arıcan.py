# -*- coding: utf-8 -*-
"""Makine Öğrenimi- Proje Ödevi-202013171063-Abdurrahman-Arıcan

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PZP6xFZZQaFgAy3qN6TNCAP_IFRMFLGD
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.tree import DecisionTreeClassifier, export_graphviz
import graphviz
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score,confusion_matrix
import tensorflow as tf
from sklearn.preprocessing import StandardScaler



dataset  =  pd.read_csv("dataset.csv")
dataset.head(1)

#dataset eğitim test ayrımı preproccess
y  = dataset["infected"]
x  = dataset.drop("infected",axis=1)

x_train, x_test ,y_train, y_test =train_test_split(x,y,random_state=7,test_size=0.15)

sc = StandardScaler()
x_train = sc.fit_transform(x_train)
x_test = sc.transform(x_test)

#Decision Tree  Model oluşturulması
decTree = DecisionTreeClassifier()

decTreeModel = decTree.fit(x_train,y_train)

y_pred = decTreeModel.predict(x_test)
decTreeModel.score(x_test,y_test)

cm = confusion_matrix(y_test,y_pred)

TN,FN,FP,TP  = cm.ravel()
print(TP)
print(FP)
print(TN)
print(FN)

# Manuel hesaplama
accuracy = (TP + TN) / (TP + TN + FP + FN)
sensitivity = TP / (TP + FN)
specificity = TN / (TN + FP)
precision = TP / (TP + FP)
f1 = 2 * (specificity * sensitivity) / (specificity + sensitivity)

print(f"Accuracy: {accuracy:.3f}")
print(f"Sensitivity : {sensitivity:.3f}")
print(f"Specificity: {specificity:.3f}")
print(f"Precision: {precision:.3f}")
print(f"F1 Score: {f1:.3f}")

plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', cbar=False)
plt.xlabel('Tahmin Edilen Etiket', fontsize=12)
plt.ylabel('Gerçek Etiket', fontsize=12)
plt.title('Karmaşıklık Matrisi', fontsize=14)
plt.show()
#0.6195 sonucu çıktı


#decision tree  grafik çizdirme
#dot = export_graphviz(decTree)
#graph = graphviz.Source(dot)
#graph

#K Near Neighbour Model oluşturulması
k = 3
knn = KNeighborsClassifier(n_neighbors=k)

knnModel = knn.fit(x_train,y_train)
y_pred = knnModel.predict(x_test)
#0.6546 sonucu çıktı

cm = confusion_matrix(y_test,y_pred)

TN,FN,FP,TP  = cm.ravel()
print(TP)
print(FP)
print(TN)
print(FN)

# Manuel hesaplama
accuracy = (TP + TN) / (TP + TN + FP + FN)
sensitivity = TP / (TP + FN)
specificity = TN / (TN + FP)
precision = TP / (TP + FP)
f1 = 2 * (specificity * sensitivity) / (specificity + sensitivity)

print(f"Accuracy: {accuracy:.3f}")
print(f"Sensitivity : {sensitivity:.3f}")
print(f"Specificity: {specificity:.3f}")
print(f"Precision: {precision:.3f}")
print(f"F1 Score: {f1:.3f}")

plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', cbar=False)
plt.xlabel('Tahmin Edilen Etiket', fontsize=12)
plt.ylabel('Gerçek Etiket', fontsize=12)
plt.title('Karmaşıklık Matrisi', fontsize=14)
plt.show()

#Destek Vektör Machine  SVM Model oluşturulması
svm = SVC(kernel="linear", random_state=7)

svmModel = svm.fit(x_train,y_train.to_numpy())

svmModel.score(x_test,y_test)
y_pred = svmModel.predict(x_test)

cm = confusion_matrix(y_test,y_pred)

TN,FN,FP,TP  = cm.ravel()
print(TP)
print(FP)
print(TN)
print(FN)

# Manuel hesaplama
accuracy = (TP + TN) / (TP + TN + FP + FN)
sensitivity = TP / (TP + FN)
specificity = TN / (TN + FP)
precision = TP / (TP + FP)
f1 = 2 * (specificity * sensitivity) / (specificity + sensitivity)

print(f"Accuracy: {accuracy:.3f}")
print(f"Sensitivity : {sensitivity:.3f}")
print(f"Specificity: {specificity:.3f}")
print(f"Precision: {precision:.3f}")
print(f"F1 Score: {f1:.3f}")

plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', cbar=False)
plt.xlabel('Tahmin Edilen Etiket', fontsize=12)
plt.ylabel('Gerçek Etiket', fontsize=12)
plt.title('Karmaşıklık Matrisi', fontsize=14)
plt.show()


#0.689 sonucu çıktı

#Yapay Sinir Ağları YSA Model oluşturulması
ysa = tf.keras.models.Sequential()

ysa.add(tf.keras.layers.Dense(units=11,activation="relu"))
ysa.add(tf.keras.layers.Dense(units=11,activation="relu"))
ysa.add(tf.keras.layers.Dense(units=1,activation="sigmoid"))

ysa.compile(
    optimizer='adam',
    loss='binary_crossentropy',
    metrics=['accuracy']
)
#epochsEpoch sayısı, modelin tüm eğitim verisi üzerinde kaç kez eğitim yapacağını belirtir. 50, modelin eğitim verilerini 50 kez öğreneceği anlamına gelir.

#Batch size, modelin her adımda kaç örnekle eğitileceğini belirler. Yani, eğitim seti 32'lik parçalara bölünür ve her seferinde 32 örnek ile model eğitilir.

#Validation split eğitim verilerinin %20'lik kısmını doğrulama seti olarak ayırır. Bu kısım modelin eğitim sırasında nasıl performans gösterdiğini görmek için kullanılır.
histroy  =  ysa.fit(x_train, y_train, epochs=100,)

y_pred = ysa.predict(x_test)

y_pred_binary = (y_pred > 0.5).astype(int)
cm = confusion_matrix(y_test,y_pred_binary)

TN,FN,FP,TP  = cm.ravel()
print(TP)
print(FP)
print(TN)
print(FN)

# Manuel hesaplama
accuracy = (TP + TN) / (TP + TN + FP + FN)
sensitivity = TP / (TP + FN)
specificity = TN / (TN + FP)
precision = TP / (TP + FP)
f1 = 2 * (specificity * sensitivity) / (specificity + sensitivity)

print(f"Accuracy: {accuracy:.3f}")
print(f"Sensitivity : {sensitivity:.3f}")
print(f"Specificity: {specificity:.3f}")
print(f"Precision: {precision:.3f}")
print(f"F1 Score: {f1:.3f}")

plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', cbar=False)
plt.xlabel('Tahmin Edilen Etiket', fontsize=12)
plt.ylabel('Gerçek Etiket', fontsize=12)
plt.title('Karmaşıklık Matrisi', fontsize=14)
plt.show()

_, test_accuracy = ysa.evaluate(x_test, y_test)
print(f"Modelin Test Doğruluğu: {test_accuracy * 100:.2f}%")




# her seferinde %70.08 çıktı sonuç

#Random Forest Classifier

forest = RandomForestClassifier()

forest.fit(x_train,y_train)


forest.score(x_test,y_test)

y_pred = forest.predict(x_test)
#0.70 sonucu çıktı
cm = confusion_matrix(y_test,y_pred)

TN,FN,FP,TP  = cm.ravel()
print(TP)
print(FP)
print(TN)
print(FN)

# Manuel hesaplama
accuracy = (TP + TN) / (TP + TN + FP + FN)
sensitivity = TP / (TP + FN)
specificity = TN / (TN + FP)
precision = TP / (TP + FP)
f1 = 2 * (specificity * sensitivity) / (specificity + sensitivity)

print(f"Accuracy: {accuracy:.3f}")
print(f"Sensitivity : {sensitivity:.3f}")
print(f"Specificity: {specificity:.3f}")
print(f"Precision: {precision:.3f}")
print(f"F1 Score: {f1:.3f}")

plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', cbar=False)
plt.xlabel('Tahmin Edilen Etiket', fontsize=12)
plt.ylabel('Gerçek Etiket', fontsize=12)
plt.title('Karmaşıklık Matrisi', fontsize=14)
plt.show()

